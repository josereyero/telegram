<?php
/**
 * @file
 * Install, update and uninstall functions for the telegram module.
 *
 */

/**
 * Implements hook_schema().
 */
function telegram_schema() {
  $schema['telegram_contact'] = array(
    'description' => "Stores information on specific Telegram contact.",
    'fields' => array(
      'oid' => array(
        'description' => 'The primary internal identifier for a contact.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'idcontact' => array(
        'description' => "The unique Telegram identifier of the {telegram_contact}.",
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'not null' => FALSE,
      ),
      'phone' => array(
        'description' => "The unique phone number of the {telegram_contact} user.",
        'type' => 'varchar',
        'length' => 255,
      ),
      'peer' => array(
        'description' => "The unique peer name of the {telegram_contact} user.",
        'type' => 'varchar',
        'default' => '',
        'length' => 255,
      ),
      'name' => array(
        'description' => "The full name of the {telegram_contact} user.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'source' => array(
        'description' => "The source of the telegram contact (telegram, created, message).",
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => 'telegram',
      ),
      'uid' => array(
        'description' => "The Drupal uid of the user who owns this Telegram account.",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'verification' => array(
        'description' => "The verification code sent to the contact.",
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => 'telegram',
      ),
      'verified' => array(
        'description' => "Indicates if a user is verified.",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => "A duplicate of {telegram_contact}.created_at in UNIX timestamp format.",
        'type' => 'int',
        'not null' => TRUE,
      ),
      'updated' => array(
        'description' => "A UNIX timestamp marking the date Telegram contacts were last fetched on.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'online' => array(
        'description' => "A UNIX timestamp marking the last time the contact was seen online.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array('peer' => array('peer'), 'phone' => array('phone'), 'idcontact' => array('idcontact')),
    'primary key' => array('oid'),
  );

  $schema['telegram_message'] = array(
    'description' => "Stores individual Telegram messages.",
    'fields' => array(
      'oid' => array(
        'description' => 'The primary internal identifier for a dialog.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'idmsg' => array(
        'description' => "Telegram unique identifier for each {telegram_message}.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'idcontact' => array(
        'description' => "Telegram unique identifier for each {telegram_contact}.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'peer' => array(
        'description' => "Name of the {telegram_contact} peer.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'phone' => array(
        'description' => "Phone number of the {telegram_contact} peer.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'direction' => array(
        'description' => "Message type. Possible values are 'incoming', 'outgoing'",
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'text' => array(
        'description' => "The text of the {telegram_message}.",
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'source' => array(
        'description' => "The application that created the {telegram_message}.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'status' => array(
        'description' => "The internal status. Possible values are 0 = done, 1 = queued, 2 = error",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => "A UNIX timestamp indicated when the message was created.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sent' => array(
        'description' => "A UNIX timestamp indicated when the message was sent.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'received' => array(
        'description' => "A UNIX timestamp indicated when the message was received.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => "A UNIX timestamp marking when this row was updated.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'readtime' => array(
        'description' => "A UNIX timestamp marking when the message was read.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array('peer' => array('peer'), 'idmsg' => array('idmsg')),
    'primary key' => array('oid'),
  );

  $schema['telegram_dialog'] = array(
    'description' => "Stores individual Telegram messages.",
    'fields' => array(
      'oid' => array(
        'description' => 'The primary internal identifier for a message.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'idcontact' => array(
        'description' => "Telegram unique identifier for each {telegram_contact}.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'peer' => array(
        'description' => "Name of the {telegram_contact} peer.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => "Name of the {telegram_contact}.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'unread' => array(
        'description' => "The number of unread messages",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => "A UNIX timestamp indicated when the message was created.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => "A UNIX timestamp marking when this row was updated.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('oid'),
  );

  $schema['telegram_object'] = array(
      'description' => "Stores Telegram objects in json_format.",
      'fields' => array(
          'oid' => array(
              'description' => 'The primary internal identifier for an object.',
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'type' => array(
              'description' => "Object type.",
              'type' => 'varchar',
              'length' => 50,
              'not null' => TRUE,
          ),
          'id' => array(
              'description' => "Telegram's numeric identifier for the object.",
              'type' => 'int',
              'not null' => FALSE,
          ),
          'name' => array(
              'description' => "Telegram's string identifier for the object.",
              'type' => 'varchar',
              'length' => 200,
              'not null' => FALSE,
          ),
          'data' => array(
              'description' => 'Object data in json format.',
              'mysql_type' => 'JSON',
              'type' => 'json',
          ),
          'created' => array(
              'description' => "A UNIX timestamp indicating when the object was created.",
              'type' => 'int',
              'not null' => TRUE,
              'default' => 0,
          ),
          'updated' => array(
              'description' => "A UNIX timestamp marking when this object was updated.",
              'type' => 'int',
              'not null' => TRUE,
              'default' => 0,
          ),
      ),
      'primary key' => array('oid'),
      'indexes' => array(
         'type_id' => array('type', 'id'),
         'type_name' => array('type', 'name'),
      ),
  );

  $schema['telegram_object_owner'] = array(
      'description' => "Stores Telegram object owners.",
      'fields' => array(
          'oid' => array(
              'description' => 'The primary internal identifier for an object.',
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'owner' => array(
              'description' => "Owner name, like 'bot:bot_id'.",
              'type' => 'varchar',
              'length' => 100,
              'not null' => TRUE,
          ),
      ),
      'primary key' => array('oid', 'owner'),
  );

  return $schema;
}

/**
 * Create telegram_object table.
 */
function telegram_update_7001() {
  $table = drupal_get_schema('telegram_object', TRUE);
  db_create_table('telegram_object', $table);
  $table = drupal_get_schema('telegram_object_owner');
  db_create_table('telegram_object_owner', $table);
}

